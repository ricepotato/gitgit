{
  "generage decorator snippets": {
    "prefix": "decorator-common",
    "body": [
      "import functools",
      "",
      "def some_deco(func):",
      "    @functools.wraps(func)",
      "    def wrapper(*args, **kwargs):",
      "        return func(*args, **kwargs)",
      "    return wrapper"
    ],
    "description": "Generate default unitttest code."
  },
  "coding utf8": {
    "prefix": "python-coding",
    "body": ["#-*- coding: utf-8 -*-"],
    "description": "Generate default unitttest code."
  },
  "py-logging": {
    "prefix": "common-logging",
    "body": [
      "import logging",
      "",
      "log = logging.getLogger(f\"app.{__name__}\")"
    ],
    "description": "Generate default logging."
  },
  "generate unittest snippets": {
    "prefix": "python-unittest",
    "body": [
      "#-*- coding: utf-8 -*-",
      "",
      "import unittest",
      "from unittest.mock import Mock, call",
      "",
      "class SomeTestCase(unittest.TestCase):",
      "    def tearDown(self):",
      "        pass",
      "",
      "    def setUp(self):",
      "        pass",
      "",
      "    def test(self):",
      "        pass",
      "",
      "if __name__ == \"__main__\":",
      "    unittest.main()"
    ],
    "description": "Generate default unitttest code."
  },
  "strftime": {
    "prefix": "strftime",
    "body": ["dt.strftime(\"%Y-%m-%d %H:%M:%S\")"],
    "description": "Generate default unitttest code."
  },
  "makerandomfile": {
    "prefix": "makerandomfile",
    "body": [
      "import os",
      "import tempfile",
      "",
      "",
      "def make_random_file(size=1024, prefix=\"tmp-random-\"):",
      "    with tempfile.NamedTemporaryFile(prefix=prefix, delete=False) as f:",
      "        f.write(os.urandom(size))",
      "        return f.name"
    ],
    "description": "make random file function"
  },
  "makerandomstring": {
    "prefix": "makerandomstring",
    "body": [
      "import string",
      "import random",
      "",
      "",
      "def make_random_string(length):",
      "    letters = string.ascii_lowercase",
      "    return \"\".join(random.choice(letters) for _ in range(length))"
    ],
    "description": "make random string"
  },
  "moddocstring": {
    "prefix": "moddocstring",
    "body": [
      "\"\"\"A one line summary of the module or program, terminated by a period.",
      "",
      "Leave one blank line.  The rest of this docstring should contain an",
      "overall description of the module or program.  Optionally, it may also",
      "contain a brief description of exported classes and functions and/or usage",
      "examples.",
      "",
      "  Typical usage example:",
      "",
      "  foo = ClassFoo()",
      "  bar = foo.FunctionBar()",
      "\"\"\""
    ],
    "description": "module doc string google style"
  },
  "funcdocstring": {
    "prefix": "funcdocstring",
    "body": [
      "\"\"\"Fetches rows from a Smalltable.",
      "",
      "Retrieves rows pertaining to the given keys from the Table instance",
      "represented by table_handle.  String keys will be UTF-8 encoded.",
      "",
      "Args:",
      "    table_handle: An open smalltable.Table instance.",
      "    keys: A sequence of strings representing the key of each table",
      "      row to fetch.  String keys will be UTF-8 encoded.",
      "    require_all_keys: If True only rows with values set for all keys will be",
      "      returned.",
      "",
      "Returns:",
      "    A dict mapping keys to the corresponding table row data",
      "    fetched. Each row is represented as a tuple of strings. For",
      "    example:",
      "",
      "    {b'Serak': ('Rigel VII', 'Preparer'),",
      "    b'Zim': ('Irk', 'Invader'),",
      "    b'Lrrr': ('Omicron Persei 8', 'Emperor')}",
      "",
      "    Returned keys are always bytes.  If a key from the keys argument is",
      "    missing from the dictionary, then that row was not found in the",
      "    table (and require_all_keys must have been False).",
      "",
      "Raises:",
      "    IOError: An error occurred accessing the smalltable.",
      "\"\"\""
    ],
    "description": "function docstring google style"
  },
  "classdocstring": {
    "prefix": "classdocstring",
    "body": [
      "\"\"\"Summary of class here.",
      "",
      "Longer class information....",
      "Longer class information....",
      "",
      "Attributes:",
      "    likes_spam: A boolean indicating if we like SPAM or not.",
      "    eggs: An integer count of the eggs we have laid.",
      "\"\"\""
    ],
    "description": "class docstring google style"
  },
  "main": {
    "prefix": "snipp_main",
    "body":[
      "def main() -> None:",
      "    pass",
      "",
      "if __name__ == \"__main__\":",
      "    main()"
    ],
    "description": "main function"
  }
}
